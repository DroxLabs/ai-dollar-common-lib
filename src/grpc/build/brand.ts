// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: brand.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "brand";

export interface BrandResponse {
  id: string;
  name: string;
  logoUrl: string;
  description: string;
  websiteUrl: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateBrandRequest {
  name: string;
  logoUrl?: string | undefined;
  description?: string | undefined;
  websiteUrl?: string | undefined;
}

export interface UpdateBrandRequest {
  id: string;
  name?: string | undefined;
  logoUrl?: string | undefined;
  description?: string | undefined;
  websiteUrl?: string | undefined;
}

function createBaseBrandResponse(): BrandResponse {
  return { id: "", name: "", logoUrl: "", description: "", websiteUrl: "", createdAt: "", updatedAt: "" };
}

export const BrandResponse: MessageFns<BrandResponse> = {
  encode(message: BrandResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.logoUrl !== "") {
      writer.uint32(26).string(message.logoUrl);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(42).string(message.websiteUrl);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrandResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrandResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrandResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: BrandResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.logoUrl !== "") {
      obj.logoUrl = message.logoUrl;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrandResponse>, I>>(base?: I): BrandResponse {
    return BrandResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrandResponse>, I>>(object: I): BrandResponse {
    const message = createBaseBrandResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.logoUrl = object.logoUrl ?? "";
    message.description = object.description ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseCreateBrandRequest(): CreateBrandRequest {
  return { name: "", logoUrl: undefined, description: undefined, websiteUrl: undefined };
}

export const CreateBrandRequest: MessageFns<CreateBrandRequest> = {
  encode(message: CreateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(18).string(message.logoUrl);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.websiteUrl !== undefined) {
      writer.uint32(34).string(message.websiteUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBrandRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
    };
  },

  toJSON(message: CreateBrandRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.websiteUrl !== undefined) {
      obj.websiteUrl = message.websiteUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(base?: I): CreateBrandRequest {
    return CreateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBrandRequest>, I>>(object: I): CreateBrandRequest {
    const message = createBaseCreateBrandRequest();
    message.name = object.name ?? "";
    message.logoUrl = object.logoUrl ?? undefined;
    message.description = object.description ?? undefined;
    message.websiteUrl = object.websiteUrl ?? undefined;
    return message;
  },
};

function createBaseUpdateBrandRequest(): UpdateBrandRequest {
  return { id: "", name: undefined, logoUrl: undefined, description: undefined, websiteUrl: undefined };
}

export const UpdateBrandRequest: MessageFns<UpdateBrandRequest> = {
  encode(message: UpdateBrandRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(26).string(message.logoUrl);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    if (message.websiteUrl !== undefined) {
      writer.uint32(42).string(message.websiteUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBrandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBrandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBrandRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : undefined,
    };
  },

  toJSON(message: UpdateBrandRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.websiteUrl !== undefined) {
      obj.websiteUrl = message.websiteUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(base?: I): UpdateBrandRequest {
    return UpdateBrandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateBrandRequest>, I>>(object: I): UpdateBrandRequest {
    const message = createBaseUpdateBrandRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    message.description = object.description ?? undefined;
    message.websiteUrl = object.websiteUrl ?? undefined;
    return message;
  },
};

export interface BrandService {
  Create(request: CreateBrandRequest): Promise<BrandResponse>;
  Update(request: UpdateBrandRequest): Promise<BrandResponse>;
}

export const BrandServiceServiceName = "brand.BrandService";
export class BrandServiceClientImpl implements BrandService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || BrandServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Update = this.Update.bind(this);
  }
  Create(request: CreateBrandRequest): Promise<BrandResponse> {
    const data = CreateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }

  Update(request: UpdateBrandRequest): Promise<BrandResponse> {
    const data = UpdateBrandRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => BrandResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
