// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: profile.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "user";

export interface CreateProfileRequest {
  userId: string;
  username: string;
  name: string;
  avatarUrl: string;
  bio: string;
  websiteUrl: string;
  twitter: string;
  github: string;
  youtube: string;
  linkedin: string;
}

export interface UpdateProfileRequest {
  userId: string;
  name: string;
  avatarUrl: string;
  bio: string;
  websiteUrl: string;
  twitter: string;
  github: string;
  youtube: string;
  linkedin: string;
}

export interface GetProfileByUsernameRequest {
  username: string;
}

export interface ProfileResponse {
  id: string;
  userId: string;
  username: string;
  name: string;
  avatarUrl: string;
  bio: string;
  websiteUrl: string;
  twitter: string;
  github: string;
  youtube: string;
  linkedin: string;
  isVerified: boolean;
  createdAt: string;
  updatedAt: string;
}

function createBaseCreateProfileRequest(): CreateProfileRequest {
  return {
    userId: "",
    username: "",
    name: "",
    avatarUrl: "",
    bio: "",
    websiteUrl: "",
    twitter: "",
    github: "",
    youtube: "",
    linkedin: "",
  };
}

export const CreateProfileRequest: MessageFns<CreateProfileRequest> = {
  encode(message: CreateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(34).string(message.avatarUrl);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(50).string(message.websiteUrl);
    }
    if (message.twitter !== "") {
      writer.uint32(58).string(message.twitter);
    }
    if (message.github !== "") {
      writer.uint32(66).string(message.github);
    }
    if (message.youtube !== "") {
      writer.uint32(74).string(message.youtube);
    }
    if (message.linkedin !== "") {
      writer.uint32(82).string(message.linkedin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.youtube = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
    };
  },

  toJSON(message: CreateProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.youtube !== "") {
      obj.youtube = message.youtube;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(base?: I): CreateProfileRequest {
    return CreateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProfileRequest>, I>>(object: I): CreateProfileRequest {
    const message = createBaseCreateProfileRequest();
    message.userId = object.userId ?? "";
    message.username = object.username ?? "";
    message.name = object.name ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.bio = object.bio ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.twitter = object.twitter ?? "";
    message.github = object.github ?? "";
    message.youtube = object.youtube ?? "";
    message.linkedin = object.linkedin ?? "";
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return {
    userId: "",
    name: "",
    avatarUrl: "",
    bio: "",
    websiteUrl: "",
    twitter: "",
    github: "",
    youtube: "",
    linkedin: "",
  };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(26).string(message.avatarUrl);
    }
    if (message.bio !== "") {
      writer.uint32(34).string(message.bio);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(42).string(message.websiteUrl);
    }
    if (message.twitter !== "") {
      writer.uint32(50).string(message.twitter);
    }
    if (message.github !== "") {
      writer.uint32(58).string(message.github);
    }
    if (message.youtube !== "") {
      writer.uint32(66).string(message.youtube);
    }
    if (message.linkedin !== "") {
      writer.uint32(74).string(message.linkedin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.youtube = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.youtube !== "") {
      obj.youtube = message.youtube;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.bio = object.bio ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.twitter = object.twitter ?? "";
    message.github = object.github ?? "";
    message.youtube = object.youtube ?? "";
    message.linkedin = object.linkedin ?? "";
    return message;
  },
};

function createBaseGetProfileByUsernameRequest(): GetProfileByUsernameRequest {
  return { username: "" };
}

export const GetProfileByUsernameRequest: MessageFns<GetProfileByUsernameRequest> = {
  encode(message: GetProfileByUsernameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProfileByUsernameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProfileByUsernameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProfileByUsernameRequest {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: GetProfileByUsernameRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProfileByUsernameRequest>, I>>(base?: I): GetProfileByUsernameRequest {
    return GetProfileByUsernameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProfileByUsernameRequest>, I>>(object: I): GetProfileByUsernameRequest {
    const message = createBaseGetProfileByUsernameRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseProfileResponse(): ProfileResponse {
  return {
    id: "",
    userId: "",
    username: "",
    name: "",
    avatarUrl: "",
    bio: "",
    websiteUrl: "",
    twitter: "",
    github: "",
    youtube: "",
    linkedin: "",
    isVerified: false,
    createdAt: "",
    updatedAt: "",
  };
}

export const ProfileResponse: MessageFns<ProfileResponse> = {
  encode(message: ProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(42).string(message.avatarUrl);
    }
    if (message.bio !== "") {
      writer.uint32(50).string(message.bio);
    }
    if (message.websiteUrl !== "") {
      writer.uint32(58).string(message.websiteUrl);
    }
    if (message.twitter !== "") {
      writer.uint32(66).string(message.twitter);
    }
    if (message.github !== "") {
      writer.uint32(74).string(message.github);
    }
    if (message.youtube !== "") {
      writer.uint32(82).string(message.youtube);
    }
    if (message.linkedin !== "") {
      writer.uint32(90).string(message.linkedin);
    }
    if (message.isVerified !== false) {
      writer.uint32(96).bool(message.isVerified);
    }
    if (message.createdAt !== "") {
      writer.uint32(106).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(114).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.websiteUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.twitter = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.github = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.youtube = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.linkedin = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      websiteUrl: isSet(object.websiteUrl) ? globalThis.String(object.websiteUrl) : "",
      twitter: isSet(object.twitter) ? globalThis.String(object.twitter) : "",
      github: isSet(object.github) ? globalThis.String(object.github) : "",
      youtube: isSet(object.youtube) ? globalThis.String(object.youtube) : "",
      linkedin: isSet(object.linkedin) ? globalThis.String(object.linkedin) : "",
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: ProfileResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.websiteUrl !== "") {
      obj.websiteUrl = message.websiteUrl;
    }
    if (message.twitter !== "") {
      obj.twitter = message.twitter;
    }
    if (message.github !== "") {
      obj.github = message.github;
    }
    if (message.youtube !== "") {
      obj.youtube = message.youtube;
    }
    if (message.linkedin !== "") {
      obj.linkedin = message.linkedin;
    }
    if (message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileResponse>, I>>(base?: I): ProfileResponse {
    return ProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileResponse>, I>>(object: I): ProfileResponse {
    const message = createBaseProfileResponse();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.username = object.username ?? "";
    message.name = object.name ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.bio = object.bio ?? "";
    message.websiteUrl = object.websiteUrl ?? "";
    message.twitter = object.twitter ?? "";
    message.github = object.github ?? "";
    message.youtube = object.youtube ?? "";
    message.linkedin = object.linkedin ?? "";
    message.isVerified = object.isVerified ?? false;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export interface ProfileService {
  CreateProfile(request: CreateProfileRequest): Promise<ProfileResponse>;
  UpdateProfile(request: UpdateProfileRequest): Promise<ProfileResponse>;
  GetProfileByUsername(request: GetProfileByUsernameRequest): Promise<ProfileResponse>;
}

export const ProfileServiceServiceName = "user.ProfileService";
export class ProfileServiceClientImpl implements ProfileService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProfileServiceServiceName;
    this.rpc = rpc;
    this.CreateProfile = this.CreateProfile.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
    this.GetProfileByUsername = this.GetProfileByUsername.bind(this);
  }
  CreateProfile(request: CreateProfileRequest): Promise<ProfileResponse> {
    const data = CreateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProfile", data);
    return promise.then((data) => ProfileResponse.decode(new BinaryReader(data)));
  }

  UpdateProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {
    const data = UpdateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProfile", data);
    return promise.then((data) => ProfileResponse.decode(new BinaryReader(data)));
  }

  GetProfileByUsername(request: GetProfileByUsernameRequest): Promise<ProfileResponse> {
    const data = GetProfileByUsernameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProfileByUsername", data);
    return promise.then((data) => ProfileResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
