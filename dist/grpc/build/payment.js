"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: payment.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentServiceClientImpl = exports.PaymentServiceServiceName = exports.PaymentIntentResponse = exports.CreatePaymentIntentRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "payment";
function createBaseCreatePaymentIntentRequest() {
    return { amount: "", currency: "" };
}
exports.CreatePaymentIntentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        if (message.currency !== "") {
            writer.uint32(18).string(message.currency);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreatePaymentIntentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.currency = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
            currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        if (message.currency !== "") {
            obj.currency = message.currency;
        }
        return obj;
    },
    create(base) {
        return exports.CreatePaymentIntentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreatePaymentIntentRequest();
        message.amount = object.amount ?? "";
        message.currency = object.currency ?? "";
        return message;
    },
};
function createBasePaymentIntentResponse() {
    return { clientSecretKey: undefined };
}
exports.PaymentIntentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientSecretKey !== undefined) {
            writer.uint32(10).string(message.clientSecretKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentIntentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientSecretKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientSecretKey: isSet(object.clientSecretKey) ? globalThis.String(object.clientSecretKey) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientSecretKey !== undefined) {
            obj.clientSecretKey = message.clientSecretKey;
        }
        return obj;
    },
    create(base) {
        return exports.PaymentIntentResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentIntentResponse();
        message.clientSecretKey = object.clientSecretKey ?? undefined;
        return message;
    },
};
exports.PaymentServiceServiceName = "payment.PaymentService";
class PaymentServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || exports.PaymentServiceServiceName;
        this.rpc = rpc;
        this.CreatePaymentIntent = this.CreatePaymentIntent.bind(this);
    }
    CreatePaymentIntent(request) {
        const data = exports.CreatePaymentIntentRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreatePaymentIntent", data);
        return promise.then((data) => exports.PaymentIntentResponse.decode(new wire_1.BinaryReader(data)));
    }
}
exports.PaymentServiceClientImpl = PaymentServiceClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=payment.js.map